#!/usr/bin/env python3

"""
List live nodes
"""

import sys
import os
import logging
import json
import argparse
from configparser import ConfigParser, ExtendedInterpolation

import requests

from solrcloudadmin import CollectionsApi

def load_configuation_files(
    general_configuration='config.ini'):
    config = ConfigParser(interpolation=ExtendedInterpolation())
    if len(config.read(general_configuration)) == 0:
        print('Unable to load %s' % general_configuration)
        sys.exit(1)
    return config

def parse_arguments():
    """
    Parse command line arguments.
    """
    parser = argparse.ArgumentParser(
        description='List live nodes'
        )
    parser.add_argument(
        '--profile', '-p', nargs=1, dest='profile', required=False,
        type=str,
        default=['DEFAULT'],
        help="""Profile from configuration file to use, defaults to DEFAULT"""
        )
    parser.add_argument(
        '--config', nargs=1, dest='config', required=False,
        type=str,
        default=['{}/.solrcloudadmin.config'.format(os.path.expanduser('~'))],
        help="""Configuration file to load"""
        )
    parser.add_argument(
        '--debug', action='store_true', required=False,
        help="""Turn on debug logging."""
        )
    return parser.parse_args()

def main():
    """
    Main function to be called if run as a script
    """
    # Load command line arguments
    args = parse_arguments()
    # Load configuration file
    config = load_configuation_files(args.config[0])

    profile = args.profile[0]
    solr_cloud_url = '%s' % (config[profile]['solrcloud'])
    zookeeper_urls = '%s' % (config[profile]['zookeeper'])

    log_level = logging.INFO
    if args.debug:
        log_level=logging.DEBUG

    # Configure solr library
    solr = CollectionsApi(solr_cloud_url=solr_cloud_url, zookeeper_urls=zookeeper_urls, log_level=log_level, timeout=300)

    response = solr.get_live_solrcloud_nodes()
    try:
        for node in sorted(response):
            print(node)
    except Exception as e:
        print(response)
        print(e)

if __name__ == '__main__':
    main()
